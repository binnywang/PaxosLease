// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace paxoslease {

namespace {

const ::google::protobuf::Descriptor* PrepareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProposeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProposeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProposeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProposeResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  PrepareRequest_descriptor_ = file->message_type(0);
  static const int PrepareRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, ballot_number_),
  };
  PrepareRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrepareRequest_descriptor_,
      PrepareRequest::default_instance_,
      PrepareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PrepareRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, _internal_metadata_),
      -1);
  PrepareResponse_descriptor_ = file->message_type(1);
  static const int PrepareResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, ballot_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, lease_empty_),
  };
  PrepareResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrepareResponse_descriptor_,
      PrepareResponse::default_instance_,
      PrepareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(PrepareResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, _internal_metadata_),
      -1);
  ProposeRequest_descriptor_ = file->message_type(2);
  static const int ProposeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeRequest, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeRequest, ballot_number_),
  };
  ProposeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProposeRequest_descriptor_,
      ProposeRequest::default_instance_,
      ProposeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProposeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeRequest, _internal_metadata_),
      -1);
  ProposeResponse_descriptor_ = file->message_type(3);
  static const int ProposeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeResponse, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeResponse, ballot_number_),
  };
  ProposeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProposeResponse_descriptor_,
      ProposeResponse::default_instance_,
      ProposeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProposeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeResponse, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrepareRequest_descriptor_, &PrepareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrepareResponse_descriptor_, &PrepareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProposeRequest_descriptor_, &ProposeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProposeResponse_descriptor_, &ProposeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete PrepareRequest::default_instance_;
  delete PrepareRequest_reflection_;
  delete PrepareResponse::default_instance_;
  delete PrepareResponse_reflection_;
  delete ProposeRequest::default_instance_;
  delete ProposeRequest_reflection_;
  delete ProposeResponse::default_instance_;
  delete ProposeResponse_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\npaxoslease\"8\n\016PrepareRe"
    "quest\022\017\n\007node_id\030\001 \002(\005\022\025\n\rballot_number\030"
    "\002 \002(\005\"N\n\017PrepareResponse\022\017\n\007node_id\030\001 \002("
    "\005\022\025\n\rballot_number\030\002 \002(\005\022\023\n\013lease_empty\030"
    "\003 \002(\010\"8\n\016ProposeRequest\022\017\n\007node_id\030\001 \002(\005"
    "\022\025\n\rballot_number\030\002 \002(\005\"9\n\017ProposeRespon"
    "se\022\017\n\007node_id\030\001 \002(\005\022\025\n\rballot_number\030\002 \002"
    "(\005", 282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  PrepareRequest::default_instance_ = new PrepareRequest();
  PrepareResponse::default_instance_ = new PrepareResponse();
  ProposeRequest::default_instance_ = new ProposeRequest();
  ProposeResponse::default_instance_ = new ProposeResponse();
  PrepareRequest::default_instance_->InitAsDefaultInstance();
  PrepareResponse::default_instance_->InitAsDefaultInstance();
  ProposeRequest::default_instance_->InitAsDefaultInstance();
  ProposeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int PrepareRequest::kNodeIdFieldNumber;
const int PrepareRequest::kBallotNumberFieldNumber;
#endif  // !_MSC_VER

PrepareRequest::PrepareRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:paxoslease.PrepareRequest)
}

void PrepareRequest::InitAsDefaultInstance() {
}

PrepareRequest::PrepareRequest(const PrepareRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:paxoslease.PrepareRequest)
}

void PrepareRequest::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  ballot_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareRequest::~PrepareRequest() {
  // @@protoc_insertion_point(destructor:paxoslease.PrepareRequest)
  SharedDtor();
}

void PrepareRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareRequest_descriptor_;
}

const PrepareRequest& PrepareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PrepareRequest* PrepareRequest::default_instance_ = NULL;

PrepareRequest* PrepareRequest::New(::google::protobuf::Arena* arena) const {
  PrepareRequest* n = new PrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrepareRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(node_id_, ballot_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:paxoslease.PrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ballot_number;
        break;
      }

      // required int32 ballot_number = 2;
      case 2: {
        if (tag == 16) {
         parse_ballot_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_number_)));
          set_has_ballot_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:paxoslease.PrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:paxoslease.PrepareRequest)
  return false;
#undef DO_
}

void PrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:paxoslease.PrepareRequest)
  // required int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // required int32 ballot_number = 2;
  if (has_ballot_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ballot_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:paxoslease.PrepareRequest)
}

::google::protobuf::uint8* PrepareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:paxoslease.PrepareRequest)
  // required int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // required int32 ballot_number = 2;
  if (has_ballot_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ballot_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paxoslease.PrepareRequest)
  return target;
}

int PrepareRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_node_id()) {
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  if (has_ballot_number()) {
    // required int32 ballot_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot_number());
  }

  return total_size;
}
int PrepareRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());

    // required int32 ballot_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrepareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareRequest::MergeFrom(const PrepareRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_ballot_number()) {
      set_ballot_number(from.ballot_number());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareRequest::CopyFrom(const PrepareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PrepareRequest::Swap(PrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareRequest::InternalSwap(PrepareRequest* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(ballot_number_, other->ballot_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareRequest_descriptor_;
  metadata.reflection = PrepareRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareResponse::kNodeIdFieldNumber;
const int PrepareResponse::kBallotNumberFieldNumber;
const int PrepareResponse::kLeaseEmptyFieldNumber;
#endif  // !_MSC_VER

PrepareResponse::PrepareResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:paxoslease.PrepareResponse)
}

void PrepareResponse::InitAsDefaultInstance() {
}

PrepareResponse::PrepareResponse(const PrepareResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:paxoslease.PrepareResponse)
}

void PrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  ballot_number_ = 0;
  lease_empty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareResponse::~PrepareResponse() {
  // @@protoc_insertion_point(destructor:paxoslease.PrepareResponse)
  SharedDtor();
}

void PrepareResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareResponse_descriptor_;
}

const PrepareResponse& PrepareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PrepareResponse* PrepareResponse::default_instance_ = NULL;

PrepareResponse* PrepareResponse::New(::google::protobuf::Arena* arena) const {
  PrepareResponse* n = new PrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrepareResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(node_id_, lease_empty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:paxoslease.PrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ballot_number;
        break;
      }

      // required int32 ballot_number = 2;
      case 2: {
        if (tag == 16) {
         parse_ballot_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_number_)));
          set_has_ballot_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lease_empty;
        break;
      }

      // required bool lease_empty = 3;
      case 3: {
        if (tag == 24) {
         parse_lease_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lease_empty_)));
          set_has_lease_empty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:paxoslease.PrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:paxoslease.PrepareResponse)
  return false;
#undef DO_
}

void PrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:paxoslease.PrepareResponse)
  // required int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // required int32 ballot_number = 2;
  if (has_ballot_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ballot_number(), output);
  }

  // required bool lease_empty = 3;
  if (has_lease_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lease_empty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:paxoslease.PrepareResponse)
}

::google::protobuf::uint8* PrepareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:paxoslease.PrepareResponse)
  // required int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // required int32 ballot_number = 2;
  if (has_ballot_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ballot_number(), target);
  }

  // required bool lease_empty = 3;
  if (has_lease_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lease_empty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paxoslease.PrepareResponse)
  return target;
}

int PrepareResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_node_id()) {
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  if (has_ballot_number()) {
    // required int32 ballot_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot_number());
  }

  if (has_lease_empty()) {
    // required bool lease_empty = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
int PrepareResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());

    // required int32 ballot_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot_number());

    // required bool lease_empty = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrepareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareResponse::MergeFrom(const PrepareResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_ballot_number()) {
      set_ballot_number(from.ballot_number());
    }
    if (from.has_lease_empty()) {
      set_lease_empty(from.lease_empty());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareResponse::CopyFrom(const PrepareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PrepareResponse::Swap(PrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareResponse::InternalSwap(PrepareResponse* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(ballot_number_, other->ballot_number_);
  std::swap(lease_empty_, other->lease_empty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareResponse_descriptor_;
  metadata.reflection = PrepareResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProposeRequest::kNodeIdFieldNumber;
const int ProposeRequest::kBallotNumberFieldNumber;
#endif  // !_MSC_VER

ProposeRequest::ProposeRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:paxoslease.ProposeRequest)
}

void ProposeRequest::InitAsDefaultInstance() {
}

ProposeRequest::ProposeRequest(const ProposeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:paxoslease.ProposeRequest)
}

void ProposeRequest::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  ballot_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProposeRequest::~ProposeRequest() {
  // @@protoc_insertion_point(destructor:paxoslease.ProposeRequest)
  SharedDtor();
}

void ProposeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProposeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProposeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProposeRequest_descriptor_;
}

const ProposeRequest& ProposeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ProposeRequest* ProposeRequest::default_instance_ = NULL;

ProposeRequest* ProposeRequest::New(::google::protobuf::Arena* arena) const {
  ProposeRequest* n = new ProposeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProposeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProposeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(node_id_, ballot_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProposeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:paxoslease.ProposeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ballot_number;
        break;
      }

      // required int32 ballot_number = 2;
      case 2: {
        if (tag == 16) {
         parse_ballot_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_number_)));
          set_has_ballot_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:paxoslease.ProposeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:paxoslease.ProposeRequest)
  return false;
#undef DO_
}

void ProposeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:paxoslease.ProposeRequest)
  // required int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // required int32 ballot_number = 2;
  if (has_ballot_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ballot_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:paxoslease.ProposeRequest)
}

::google::protobuf::uint8* ProposeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:paxoslease.ProposeRequest)
  // required int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // required int32 ballot_number = 2;
  if (has_ballot_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ballot_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paxoslease.ProposeRequest)
  return target;
}

int ProposeRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_node_id()) {
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  if (has_ballot_number()) {
    // required int32 ballot_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot_number());
  }

  return total_size;
}
int ProposeRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());

    // required int32 ballot_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProposeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProposeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProposeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProposeRequest::MergeFrom(const ProposeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_ballot_number()) {
      set_ballot_number(from.ballot_number());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProposeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposeRequest::CopyFrom(const ProposeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProposeRequest::Swap(ProposeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposeRequest::InternalSwap(ProposeRequest* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(ballot_number_, other->ballot_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProposeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProposeRequest_descriptor_;
  metadata.reflection = ProposeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProposeResponse::kNodeIdFieldNumber;
const int ProposeResponse::kBallotNumberFieldNumber;
#endif  // !_MSC_VER

ProposeResponse::ProposeResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:paxoslease.ProposeResponse)
}

void ProposeResponse::InitAsDefaultInstance() {
}

ProposeResponse::ProposeResponse(const ProposeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:paxoslease.ProposeResponse)
}

void ProposeResponse::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  ballot_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProposeResponse::~ProposeResponse() {
  // @@protoc_insertion_point(destructor:paxoslease.ProposeResponse)
  SharedDtor();
}

void ProposeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProposeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProposeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProposeResponse_descriptor_;
}

const ProposeResponse& ProposeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ProposeResponse* ProposeResponse::default_instance_ = NULL;

ProposeResponse* ProposeResponse::New(::google::protobuf::Arena* arena) const {
  ProposeResponse* n = new ProposeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProposeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProposeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(node_id_, ballot_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProposeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:paxoslease.ProposeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ballot_number;
        break;
      }

      // required int32 ballot_number = 2;
      case 2: {
        if (tag == 16) {
         parse_ballot_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_number_)));
          set_has_ballot_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:paxoslease.ProposeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:paxoslease.ProposeResponse)
  return false;
#undef DO_
}

void ProposeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:paxoslease.ProposeResponse)
  // required int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // required int32 ballot_number = 2;
  if (has_ballot_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ballot_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:paxoslease.ProposeResponse)
}

::google::protobuf::uint8* ProposeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:paxoslease.ProposeResponse)
  // required int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // required int32 ballot_number = 2;
  if (has_ballot_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ballot_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paxoslease.ProposeResponse)
  return target;
}

int ProposeResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_node_id()) {
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  if (has_ballot_number()) {
    // required int32 ballot_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot_number());
  }

  return total_size;
}
int ProposeResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());

    // required int32 ballot_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProposeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProposeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProposeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProposeResponse::MergeFrom(const ProposeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_ballot_number()) {
      set_ballot_number(from.ballot_number());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProposeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposeResponse::CopyFrom(const ProposeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProposeResponse::Swap(ProposeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposeResponse::InternalSwap(ProposeResponse* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(ballot_number_, other->ballot_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProposeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProposeResponse_descriptor_;
  metadata.reflection = ProposeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace paxoslease

// @@protoc_insertion_point(global_scope)
